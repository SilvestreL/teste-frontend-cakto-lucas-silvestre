import Decimal from "decimal.js";
import { getPricing, getFormattedPricing, pricingService } from "./pricingService";

/**
 * Exemplo de uso do novo sistema de pre√ßos
 */
export function demonstratePricingSystem() {
  console.log("üöÄ Sistema de Pre√ßos Avan√ßado - Exemplo de Uso\n");

  // Exemplo 1: PIX (sem juros)
  console.log("1Ô∏è‚É£ PIX - Pagamento √† vista");
  const pixPricing = getPricing({
    originalValue: new Decimal("397.00"),
    currentValue: new Decimal("297.00"), // Pre√ßo promocional
    paymentMethod: "pix",
    installments: 1,
  });

  const pixFormatted = getFormattedPricing({
    originalValue: new Decimal("397.00"),
    currentValue: new Decimal("297.00"),
    paymentMethod: "pix",
    installments: 1,
  });

  console.log(`   Pre√ßo original: ${pixFormatted.originalValue}`);
  console.log(`   Pre√ßo atual: ${pixFormatted.effectiveValue}`);
  console.log(`   Total a pagar: ${pixFormatted.total}`);
  console.log(`   Economia: ${pixFormatted.savings}`);
  console.log(`   Taxa: ${pixFormatted.rate}`);
  console.log(`   V√°lido: ${pixPricing.isValid ? "‚úÖ" : "‚ùå"}\n`);

  // Exemplo 2: Cart√£o 1x (com juros)
  console.log("2Ô∏è‚É£ Cart√£o - 1x com juros");
  const card1xPricing = getPricing({
    originalValue: new Decimal("397.00"),
    currentValue: new Decimal("297.00"),
    paymentMethod: "card",
    installments: 1,
  });

  const card1xFormatted = getFormattedPricing({
    originalValue: new Decimal("397.00"),
    currentValue: new Decimal("297.00"),
    paymentMethod: "card",
    installments: 1,
  });

  console.log(`   Pre√ßo original: ${card1xFormatted.originalValue}`);
  console.log(`   Pre√ßo atual: ${card1xFormatted.effectiveValue}`);
  console.log(`   Total a pagar: ${card1xFormatted.total}`);
  console.log(`   Taxa: ${card1xFormatted.rate}`);
  console.log(`   V√°lido: ${card1xPricing.isValid ? "‚úÖ" : "‚ùå"}\n`);

  // Exemplo 3: Cart√£o 3x (com juros)
  console.log("3Ô∏è‚É£ Cart√£o - 3x com juros");
  const card3xPricing = getPricing({
    originalValue: new Decimal("397.00"),
    currentValue: new Decimal("297.00"),
    paymentMethod: "card",
    installments: 3,
  });

  const card3xFormatted = getFormattedPricing({
    originalValue: new Decimal("397.00"),
    currentValue: new Decimal("297.00"),
    paymentMethod: "card",
    installments: 3,
  });

  console.log(`   Pre√ßo original: ${card3xFormatted.originalValue}`);
  console.log(`   Pre√ßo atual: ${card3xFormatted.effectiveValue}`);
  console.log(`   Total a pagar: ${card3xFormatted.total}`);
  console.log(`   Parcela: ${card3xFormatted.monthlyValue}`);
  console.log(`   Taxa: ${card3xFormatted.rate}`);
  console.log(`   V√°lido: ${card3xPricing.isValid ? "‚úÖ" : "‚ùå"}\n`);

  // Exemplo 4: Cart√£o 11x (alta taxa)
  console.log("4Ô∏è‚É£ Cart√£o - 11x com alta taxa");
  const card11xPricing = getPricing({
    originalValue: new Decimal("397.00"),
    currentValue: new Decimal("297.00"),
    paymentMethod: "card",
    installments: 11,
  });

  const card11xFormatted = getFormattedPricing({
    originalValue: new Decimal("397.00"),
    currentValue: new Decimal("297.00"),
    paymentMethod: "card",
    installments: 11,
  });

  console.log(`   Pre√ßo original: ${card11xFormatted.originalValue}`);
  console.log(`   Pre√ßo atual: ${card11xFormatted.effectiveValue}`);
  console.log(`   Total a pagar: ${card11xFormatted.total}`);
  console.log(`   Parcela: ${card11xFormatted.monthlyValue}`);
  console.log(`   Taxa: ${card11xFormatted.rate}`);
  console.log(`   V√°lido: ${card11xPricing.isValid ? "‚úÖ" : "‚ùå"}\n`);

  // Exemplo 5: Op√ß√µes de parcelamento
  console.log("5Ô∏è‚É£ Op√ß√µes de Parcelamento");
  const installmentOptions = card3xPricing.installmentOptions;
  console.log(`   Total de op√ß√µes: ${installmentOptions.length}`);
  
  installmentOptions.slice(0, 5).forEach((option, index) => {
    const formatted = getFormattedPricing({
      originalValue: new Decimal("397.00"),
      currentValue: new Decimal("297.00"),
      paymentMethod: "card",
      installments: option.value,
    });
    
    console.log(`   ${option.label} ${formatted.monthlyValue} (${formatted.rate})`);
  });
  console.log("   ...\n");

  // Exemplo 6: Cache e performance
  console.log("6Ô∏è‚É£ Cache e Performance");
  const cacheStats = pricingService.getCacheStats();
  console.log(`   Itens em cache: ${cacheStats.size}`);
  console.log(`   Chaves: ${cacheStats.keys.slice(0, 3).join(", ")}...\n`);

  // Exemplo 7: Valida√ß√£o de entrada
  console.log("7Ô∏è‚É£ Valida√ß√£o de Entrada");
  const invalidPricing = getPricing({
    originalValue: new Decimal("100.00"),
    currentValue: new Decimal("100.00"),
    paymentMethod: "card",
    installments: 15, // Muitas parcelas
  });

  console.log(`   Parcelas: 15`);
  console.log(`   V√°lido: ${invalidPricing.isValid ? "‚úÖ" : "‚ùå"}`);
  console.log(`   Motivo: ${invalidPricing.validationReason}\n`);

  // Exemplo 8: Compara√ß√£o de m√©todos
  console.log("8Ô∏è‚É£ Compara√ß√£o de M√©todos");
  const methods = ["pix", "card"] as const;
  const installments = [1, 3, 6, 12];
  
  console.log("   M√©todo | Parcelas | Total     | Taxa      | V√°lido");
  console.log("   -------|----------|-----------|-----------|--------");
  
  methods.forEach(method => {
    installments.forEach(inst => {
      const pricing = getPricing({
        originalValue: new Decimal("297.00"),
        currentValue: new Decimal("297.00"),
        paymentMethod: method,
        installments: inst,
      });
      
      const formatted = getFormattedPricing({
        originalValue: new Decimal("297.00"),
        currentValue: new Decimal("297.00"),
        paymentMethod: method,
        installments: inst,
      });
      
      console.log(`   ${method.toUpperCase().padEnd(6)} | ${inst.toString().padEnd(8)} | ${formatted.total.padEnd(9)} | ${formatted.rate.padEnd(9)} | ${pricing.isValid ? "‚úÖ" : "‚ùå"}`);
    });
  });

  console.log("\n‚ú® Sistema de pre√ßos implementado com sucesso!");
  console.log("   ‚Ä¢ Precis√£o decimal com Big/Decimal");
  console.log("   ‚Ä¢ Single source of truth");
  console.log("   ‚Ä¢ Testes unit√°rios completos");
  console.log("   ‚Ä¢ Parcela m√≠nima e √∫ltima parcela ajustada");
  console.log("   ‚Ä¢ Formatadores centralizados e memoiza√ß√£o");
  console.log("   ‚Ä¢ Cache inteligente para performance");
}

// Executar exemplo se chamado diretamente
if (require.main === module) {
  demonstratePricingSystem();
}
